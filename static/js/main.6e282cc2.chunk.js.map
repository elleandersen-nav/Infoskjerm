{"version":3,"sources":["logo.svg","Reddit.js","Bikes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Reddit","useState","joke","setJoke","console","log","useEffect","fetch","then","response","json","data","children","catch","err","error","className","title","selftext","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","map","stationData","key","id","station","Station","props","name","bikesAvailable","spacesAvailable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,gHC+B5BC,EA3BA,WAAO,IAAD,EACMC,mBAAS,IADf,mBACVC,EADU,KACLC,EADK,KAgBjB,OANAC,QAAQC,IAAIH,GAGZI,qBAAU,WATNC,MANO,4DAONC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUP,EAAQO,EAAKC,KAAKC,SAAS,GAAGD,SAC7CE,OAAM,SAACC,GAAD,OAASV,QAAQW,MAAMD,QAQ/B,IACIZ,EAEN,yBAAKc,UAAW,UACb,2BAAId,EAAKe,OACT,2BAAIf,EAAKgB,WAGT,sC,QCxBFC,E,MAAUC,GAAmB,CAACC,WAAY,4BAoBjCC,EAlBD,WAAO,IAAD,EACwBrB,mBAAS,IADjC,mBACTsB,EADS,KACKC,EADL,KAWhB,OARAlB,qBAAU,WACNa,EAAQM,gCAAgC,CAACC,SAAU,WAAYC,UAAW,YACtE,KAEHnB,MAAK,SAACG,GAAD,OAAUa,EAAgBb,QACjC,IAGI,yBAAKK,UAAW,gBACvB,wCACCO,EAAaK,KAAI,SAAAC,GAAW,OACzB,kBAAC,EAAD,CAASC,IAAKD,EAAYE,GAAIC,QAAWH,SAO3CI,EAAU,SAACC,GAAW,IAClBF,EAAWE,EAAXF,QAGN,OAAO,yBAAKhB,UAAU,WACjBgB,EAAQG,KADN,qBAC8BH,EAAQI,eADtC,qBACwEJ,EAAQK,kB,YCf5EC,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,0CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAE,GACLX,QAAQW,MAAMA,EAAMuC,c","file":"static/js/main.6e282cc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\n\nconst APIUrl = \"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\";\n\nconst Reddit = () => {\n    const [joke,setJoke] = useState({});\n\n    const getJoke = () => {\n        fetch(APIUrl)\n        .then((response) => response.json())\n        .then((json) => setJoke(json.data.children[0].data))\n        .catch((err) => console.error(err));\n    };\n        \n    console.log(joke);\n    //getJoke();\n\n    useEffect(() => {\n        getJoke();\n    }, []); \n    return joke ? (\n\n     <div className= \"reddit\">\n        <p>{joke.title}</p>\n        <p>{joke.selftext}</p>\n    </div>\n    ) : (\n        <></>\n    );\n};\n\nexport default Reddit;","import React, { useState, useEffect} from \"react\";\nimport createEnturService from \"@entur/sdk\";\n\nconst service = createEnturService({clientName: \"andersen-infoskjermkurs\"});\n\nconst Bikes = () => {\n    const [bikeStations, setBikeStations] = useState([]);\n\n    useEffect(() => {\n        service.getBikeRentalStationsByPosition({latitude: 59.9289553, longitude: 10.7586829},\n            230\n        )\n        .then((data) => setBikeStations(data));\n    }, []);\n\n    //console.log(bikeStations);\n    return <div className =\"BikeStations\">\n    <h1>Bysykkel</h1>\n    {bikeStations.map(stationData => (\n        <Station key={stationData.id} station = {stationData}/>\n    ))}</div>;\n};\n\nexport default Bikes;\n\n//props sender data fra en komponent til en annen\nconst Station = (props) => {\n    const{station} = props;\n\n    //console.log(station);\n    return <div className=\"station\">\n        {station.name} : antall ledige: {station.bikesAvailable} , plasser ledig: {station.spacesAvailable}\n    </div>;\n};","import React from 'react';\nimport Reddit from \"./Reddit\";\nimport Bikes from \"./Bikes\";\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Infoskjerm</h1>\n      <Reddit />\n      <Bikes />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}